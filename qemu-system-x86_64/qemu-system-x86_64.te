module qemu-system-x86_64 1.0.0;
########################################
require {
    class chr_file { ioctl open read write };
    class dbus { send_msg };
    class file { entrypoint lock open read setattr write };
    class lnk_file { read };
    class shm { unix_read unix_write };
    class sock_file { write };
    class unix_stream_socket { connectto };
    type config_home_t;
    type kvm_device_t;
    type svirt_t;
    type svirt_tmpfs_t;
    type system_dbusd_t;
    type system_dbusd_var_lib_t;
    type system_dbusd_var_run_t;
    type user_home_t;
    type user_t;
    type virt_home_t;
}
########################################
type_transition user_t virt_home_t: process svirt_t;
########################################
#============= svirt_t ==============
allow svirt_t config_home_t:file { open read write };
allow svirt_t system_dbusd_t:dbus send_msg;
allow svirt_t system_dbusd_t:unix_stream_socket connectto;
allow svirt_t system_dbusd_var_lib_t:lnk_file read;
allow svirt_t system_dbusd_var_run_t:sock_file write;
allow svirt_t user_home_t:file { lock open read };
allow svirt_t user_t:unix_stream_socket connectto;
allow svirt_t virt_home_t:file { entrypoint read setattr write };
#============= user_t ==============
#allow user_t kvm_device_t:chr_file { ioctl open read write }; # Allows user to launch KVM via the command line, but the process will run as user_t instead of svirt_t
allow user_t svirt_t:shm { unix_read unix_write };
allow user_t svirt_tmpfs_t:file { read write };
